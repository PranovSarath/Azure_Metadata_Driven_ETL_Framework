# Databricks notebook source
def fn_generateCreateTableSqlStatement(df, database_name, table_name, target_path, entity_type):
    """
    Generate a SPARK SQL statement to create a table with the same schema as the input DataFrame.

    Parameters:
    - df: PySpark DataFrame
    - database_name: Name for the database in which table is to be created
    - table_name: Name for the table to be created
    - target_path: Target location where the table is to be created

    Returns:
    - sql_statement: String containing the SPARK SQL statement
    """

    # Get the schema of the DataFrame
    schema = df.schema

    # Create a Spark session
    spark = SparkSession.builder.appName('CreateTableSQLScript').getOrCreate()

    dataTypeMapping = {'StringType()': 'STRING', "TimestampType()" : "TIMESTAMP", "DateType()": "DATE", "LongType()": "BIGINT",
                       "FloatType()": "FLOAT", "IntegerType()": "INT", "DecimalType()": "DECIMAL", "FloatType()": "FLOAT", "BinaryType()": "BIT", "BooleanType()": "BOOLEAN"}
    
    nullableMapping = {True: "", False : "NOT NULL"}

    validFromColumn = ''
    validToColumn = ''
    isLatestColumn = ''

    if 'ValidFromDWLoadDate' not in df.columns:
        validFromColumn = ",\n ValidFromDWLoadDate TIMESTAMP NOT NULL"
    
    if entity_type == 'SCD-2':
        if 'ValidToDWLoadDate' not in df.columns:
            validToColumn = ",\n ValidToDWLoadDate TIMESTAMP"
        if 'IsLatestFlag' not in df.columns:
            isLatestColumn = ",\n IsLatest BOOLEAN NOT NULL"
          

    # Generate the schema string for the CREATE TABLE statement
    schema_string = ',\n'.join([f"{field.name} {dataTypeMapping.get(str(field.dataType), 'STRING')} {nullableMapping.get(field.nullable, '')}" for field in schema])

    # Generate the SQL statement for creating a table with the same schema
    auto_gen_id_col_statement = f"\nDL_{table_name}_ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),\n"
    location_statement = f"LOCATION '{target_path}'"

    sql_statement = f"CREATE TABLE {database_name}.{table_name} ({auto_gen_id_col_statement}{schema_string}{validFromColumn}{validToColumn}{isLatestColumn}) USING delta\n{location_statement}"

    return sql_statement
